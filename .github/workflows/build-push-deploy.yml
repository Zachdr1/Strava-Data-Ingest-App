name: build and deploy

on:
  push

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      full_sha: ${{ steps.commit_hash.outputs.full_sha }}
      short_sha: ${{ steps.commit_hash.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Get commit hash
        id: commit_hash
        run: |
          echo "full_sha=$GITHUB_SHA" >> $GITHUB_OUTPUT
  run_tests:
    name: Run tests 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry==2.0.1

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12' 
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  build_and_push_container:
    name: Push Docker image to Amazon ECR
    runs-on: ubuntu-latest
    needs: ["run_tests"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Docker build and cache
        env:
          image_tag: ${{ steps.login-ecr.outputs.registry }}/my-lambda-repo:${{ github.sha }}
          cache_image_tag: ${{ steps.login-ecr.outputs.registry }}/my-lambda-repo-cache:latest
        shell: bash
        run: |
          docker buildx build --load --platform=linux/amd64 \
            --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ env.cache_image_tag }} \
            --cache-from type=registry,ref=${{ env.cache_image_tag }} \
            -t ${{ env.image_tag }} .
        
      - name: Docker push
        env:
          image_tag: ${{ steps.login-ecr.outputs.registry }}/my-lambda-repo:latest
        shell: bash
        run: |
          docker push ${{ env.image_tag }}

  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    needs: ["run_tests", "build_and_push_container"]
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -var "docker_image_tag=$GITHUB_SHA" -auto-approve
  
  # deploy_lambdas:
  #   name: Deploy all lambdas
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: ["terraform", "build_and_push_container"]
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12' 
  #         cache: 'pip'
  #
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1 
  #
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         mask-password: 'true'
  #
  #     - name: Install dependencies
  #       run: pip install boto3
  #
  #     - name: Run deploy script
  #       run: python scripts/deploy_all_lambdas.py
