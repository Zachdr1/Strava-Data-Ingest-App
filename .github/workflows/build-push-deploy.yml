name: build and deploy

on:
  push
    # branches:
    #   - main  # Trigger on push to main branch

jobs:
  run_tests:
    name: Run tests 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  push_to_ecr:
    # if: github.ref == 'refs/heads/main'
    name: Push Docker image to Amazon ECR
    env:
      ECR_REPOSITORY: my-lambda-repo
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Set Commit SHA as Env Var
        run: echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      # - name: Build, tag, and push image to ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: my-lambda-repo
      #     IMAGE_TAG: testing
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.COMMIT_SHA }} .

      - name: Push Docker Image to ECR
        id: push
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.COMMIT_SHA }}
          echo "::set-output name=image_tag::${{ env.COMMIT_SHA }}"

      - name: Tag as Latest (Optional)
        run: |
          docker tag ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.COMMIT_SHA }} \
                     ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    needs: ["push_to_ecr"]
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve
